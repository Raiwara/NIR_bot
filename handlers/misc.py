# handlers/misc.py

import json
from aiogram import F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database import create_db_connection
import keyboards


class MiscStates(StatesGroup):
    WAITING_DELETE_CONFIRM = State()
    WAITING_USER_SELECTION = State()


def register_handlers(dp):
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–º—ã
    dp.message(F.text == 'üìö –°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–º—ã')(show_free_topics)

    # –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç
    dp.message(F.text == 'üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')(delete_account_start)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', MiscStates.WAITING_DELETE_CONFIRM)(cancel_handler)
    dp.message(MiscStates.WAITING_DELETE_CONFIRM)(process_delete_confirm)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
    dp.message(F.text == 'üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è')(view_data_start)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', MiscStates.WAITING_USER_SELECTION)(cancel_handler)
    dp.message(MiscStates.WAITING_USER_SELECTION)(process_user_selection)

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')(cancel_handler)


async def show_free_topics(message: Message):
    conn = await create_db_connection()
    try:
        topics = await conn.fetch(
            """
            SELECT t.title, t.description, t.keywords,
                   COALESCE(te.name, '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') AS teacher_name
              FROM Topics t
              LEFT JOIN Teachers te ON t.teacher_id = te.teacher_id
             WHERE t.status = 'free'
             ORDER BY t.title
             LIMIT 50
            """
        )
    finally:
        await conn.close()

    if not topics:
        return await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–µ–º.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ 5 —Ç–µ–º
    for i in range(0, len(topics), 5):
        chunk = topics[i: i + 5]
        text = "\n\n".join(
            f"üìå <b>{t['title']}</b>\n"
            f"üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {t['teacher_name']}\n"
            f"üè∑ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(t['keywords'])}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {t['description'] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
            for t in chunk
        )
        await message.answer(text, parse_mode="HTML")


async def delete_account_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ')],
            [KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞?",
        reply_markup=kb
    )
    await state.set_state(MiscStates.WAITING_DELETE_CONFIRM)


async def process_delete_confirm(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    if message.text.strip() == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é —É–¥–∞–ª–µ–Ω–∏–µ':
        conn = await create_db_connection()
        try:
            await conn.execute("DELETE FROM Students WHERE telegram_id = $1", user_id)
            await conn.execute("DELETE FROM Teachers WHERE telegram_id = $1", user_id)
        finally:
            await conn.close()

        await message.answer(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start.",
            reply_markup=keyboards.registration_kb
        )
    else:
        await return_to_main_menu(message)
    await state.clear()


async def view_data_start(message: Message, state: FSMContext):
    conn = await create_db_connection()
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ç–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        rows = await conn.fetch(
            """
            SELECT telegram_id, name, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å' AS role, teacher_id AS uid
              FROM Teachers
            UNION ALL
            SELECT telegram_id, name, '–°—Ç—É–¥–µ–Ω—Ç' AS role, student_id AS uid
              FROM Students
            ORDER BY role DESC, name
            """
        )
    finally:
        await conn.close()

    buttons = [
        [KeyboardButton(text=f"{r['role']} | {r['name']}")] for r in rows
    ]
    buttons.append([KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')])
    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:",
        reply_markup=kb
    )
    await state.set_state(MiscStates.WAITING_USER_SELECTION)


async def process_user_selection(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await cancel_handler(message, state)
        return

    role, name = [part.strip() for part in text.split('|', 1)]

    conn = await create_db_connection()
    try:
        if role == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å':
            row = await conn.fetchrow(
                """
                SELECT name, email, phone, telegram_id,
                       (SELECT title FROM Topics WHERE teacher_id = t.teacher_id LIMIT 1) AS topic
                  FROM Teachers t
                 WHERE t.name = $1
                """,
                name
            )
        else:
            row = await conn.fetchrow(
                """
                SELECT name, email, phone, telegram_id,
                       (SELECT title FROM Topics WHERE student_id = s.student_id LIMIT 1) AS topic
                  FROM Students s
                 WHERE s.name = $1
                """,
                name
            )
    finally:
        await conn.close()

    if row:
        await message.answer(
            "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"–†–æ–ª—å: <b>{role}</b>\n"
            f"–ò–º—è: {row['name']}\n"
            f"Email: {row['email']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {row['phone']}\n"
            f"–¢–µ–º–∞: {row['topic'] or '–Ω–µ—Ç —Ç–µ–º—ã'}",
            parse_mode="HTML"
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await return_to_main_menu(message)
    await state.clear()


async def cancel_handler(message: Message, state: FSMContext = None):
    if state:
        await state.clear()
    await return_to_main_menu(message)


async def return_to_main_menu(message: Message):
    user_id = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        is_student = await conn.fetchval("SELECT 1 FROM Students WHERE telegram_id = $1", user_id)
        is_teacher = await conn.fetchval("SELECT 1 FROM Teachers WHERE telegram_id = $1", user_id)
    finally:
        await conn.close()

    if is_student:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.student_kb)
    elif is_teacher:
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboards.teacher_kb)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboards.registration_kb)
