# handlers/search.py
import json
from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import create_db_connection
import keyboards

# –£—Ç–∏–ª–∏—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def log_action(conn, user_id: str, action: str, details: dict):
    await conn.execute(
        """
        INSERT INTO Logs(user_id, action, details)
        VALUES($1, $2, $3)
        """,
        user_id,
        action,
        json.dumps(details)
    )

class SearchStates(StatesGroup):
    WAITING_KEYWORDS = State()
    WAITING_TITLE    = State()
    WAITING_TEACHER  = State()

def register_handlers(dp):
    dp.message(F.text == 'üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã')(search_topic_start)

    # –û—Ç–º–µ–Ω–∞
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', SearchStates.WAITING_KEYWORDS)(cancel_search)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', SearchStates.WAITING_TITLE)(cancel_search)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', SearchStates.WAITING_TEACHER)(cancel_search)

    # –í–µ—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
    dp.message(F.text == "üîé –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")(search_by_keywords_start)
    dp.message(SearchStates.WAITING_KEYWORDS)(process_search_by_keywords)

    dp.message(F.text == "üìñ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")(search_by_title_start)
    dp.message(SearchStates.WAITING_TITLE)(process_search_by_title)

    dp.message(F.text == "üë®üè´ –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")(search_by_teacher_start)
    dp.message(SearchStates.WAITING_TEACHER)(process_search_by_teacher)


async def search_topic_start(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üîé –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")],
            [KeyboardButton(text="üìñ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é")],
            [KeyboardButton(text="üë®üè´ –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=kb)


async def cancel_search(message: Message, state: FSMContext):
    await state.clear()
    user_id = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        is_student = await conn.fetchval(
            "SELECT 1 FROM Students WHERE telegram_id = $1", user_id
        )
    finally:
        await conn.close()

    kb = keyboards.student_kb if is_student else keyboards.teacher_kb
    await message.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=kb)


# ---- –ü–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ----

async def search_by_keywords_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=kb)
    await state.set_state(SearchStates.WAITING_KEYWORDS)


async def process_search_by_keywords(message: Message, state: FSMContext):
    keywords = [kw.strip().lower() for kw in message.text.split(',') if kw.strip()]
    if not keywords:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")

    conn = await create_db_connection()
    try:
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–º—ã –≤–º–µ—Å—Ç–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
        conditions = []
        params     = []
        for i, kw in enumerate(keywords, start=1):
            conditions.append(f"LOWER(k) LIKE ${i}")
            params.append(f"%{kw}%")

        sql = f"""
            SELECT
              t.title,
              t.description,
              t.keywords,
              COALESCE(te.name, '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')     AS teacher_name,
              COALESCE(s.name, '‚Äî')                AS student_name,
              t.status
            FROM Topics t
            LEFT JOIN Teachers te ON t.teacher_id = te.teacher_id
            LEFT JOIN Students s ON t.student_id = s.student_id
            WHERE EXISTS (
                SELECT 1 FROM unnest(t.keywords) AS k
                WHERE {' OR '.join(conditions)}
            )
            ORDER BY t.title
            LIMIT 50
        """
        topics = await conn.fetch(sql, *params)

        # –õ–æ–≥–∏—Ä—É–µ–º
        await log_action(
            conn,
            str(message.from_user.id),
            'search_by_keywords',
            {'keywords': keywords, 'count': len(topics)}
        )
    finally:
        await conn.close()

    if not topics:
        return await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")

    text = ["üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:"]
    for t in topics:
        kws = ", ".join(t['keywords'])
        text.append(
            f"\nüìå <b>{t['title']}</b>\n"
            f"üë®üè´ {t['teacher_name']}\n"
            f"üë§ {t['student_name']}\n"
            f"üè∑ {kws}\n"
            f"üìù {t['description'] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üîπ {t['status']}"
        )
    await message.answer("\n".join(text), parse_mode="HTML")
    await state.clear()


# ---- –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é ----

async def search_by_title_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã:", reply_markup=kb)
    await state.set_state(SearchStates.WAITING_TITLE)


async def process_search_by_title(message: Message, state: FSMContext):
    term = message.text.strip().lower()
    if len(term) < 3:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞:")

    conn = await create_db_connection()
    try:
        topics = await conn.fetch(
            """
            SELECT
              t.title,
              t.description,
              t.keywords,
              COALESCE(te.name, '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') AS teacher_name,
              COALESCE(s.name, '‚Äî')             AS student_name,
              t.status
            FROM Topics t
            LEFT JOIN Teachers te ON t.teacher_id = te.teacher_id
            LEFT JOIN Students s ON t.student_id = s.student_id
            WHERE LOWER(t.title) LIKE $1
            ORDER BY t.title
            LIMIT 50
            """, f"%{term}%"
        )
        await log_action(
            conn,
            str(message.from_user.id),
            'search_by_title',
            {'term': term, 'count': len(topics)}
        )
    finally:
        await conn.close()

    if not topics:
        return await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.")

    text = ["üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:"]
    for t in topics:
        kws = ", ".join(t['keywords'])
        text.append(
            f"\nüìå <b>{t['title']}</b>\n"
            f"üë®üè´ {t['teacher_name']}\n"
            f"üë§ {t['student_name']}\n"
            f"üè∑ {kws}\n"
            f"üìù {t['description'] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üîπ {t['status']}"
        )
    await message.answer("\n".join(text), parse_mode="HTML")
    await state.clear()


# ---- –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é ----

async def search_by_teacher_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=kb)
    await state.set_state(SearchStates.WAITING_TEACHER)


async def process_search_by_teacher(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞:")

    conn = await create_db_connection()
    try:
        topics = await conn.fetch(
            """
            SELECT
              t.title,
              t.description,
              t.keywords,
              te.name AS teacher_name,
              COALESCE(s.name, '‚Äî') AS student_name,
              t.status
            FROM Topics t
            JOIN Teachers te ON t.teacher_id = te.teacher_id
            LEFT JOIN Students s ON t.student_id = s.student_id
            WHERE te.name ILIKE $1
            ORDER BY t.title
            LIMIT 50
            """, f"%{name}%"
        )
        await log_action(
            conn,
            str(message.from_user.id),
            'search_by_teacher',
            {'name': name, 'count': len(topics)}
        )
    finally:
        await conn.close()

    if not topics:
        return await message.answer("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")

    text = ["üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:"]
    for t in topics:
        kws = ", ".join(t['keywords'])
        text.append(
            f"\nüìå <b>{t['title']}</b>\n"
            f"üë®üè´ {t['teacher_name']}\n"
            f"üë§ {t['student_name']}\n"
            f"üè∑ {kws}\n"
            f"üìù {t['description'] or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üîπ {t['status']}"
        )
    await message.answer("\n".join(text), parse_mode="HTML")
    await state.clear()
