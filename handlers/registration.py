# handlers/registration.py
import re
from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from config import TEACHER_ACCESS_CODE
from database import create_db_connection
import keyboards

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegState:
    ROLE_SELECTION = 0
    TEACHER_CODE = 1
    NAME_INPUT = 2
    EMAIL_INPUT = 3
    PHONE_INPUT = 4
    GROUP_INPUT = 5
    DEPARTMENT_SELECTION = 6

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_registration_data = {}

# –í–∞–ª–∏–¥–∞—Ü–∏–∏
def validate_email(email: str) -> bool:
    return re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email) is not None

def validate_phone(phone: str) -> bool:
    return re.match(r'^\+7\d{10}$', phone) is not None

def validate_group(group: str) -> bool:
    return re.match(r'^[–ê-–ØA-Z]{2,3}-\d{2,3}$', group) is not None

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers(dp):
    dp.message(Command("start"))(start_handler)
    dp.message(F.text.in_(['üéì –°—Ç—É–¥–µ–Ω—Ç','üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']))(role_handler)
    dp.message(
        F.text,
        lambda message: message.from_user.id in user_registration_data
    )(process_registration)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start_handler(message: Message):
    user_id = message.from_user.id
    conn = None
    try:
        conn = await create_db_connection()
        student = await conn.fetchrow(
            "SELECT * FROM Students WHERE telegram_id = $1",
            str(user_id)
        )
        teacher = await conn.fetchrow(
            "SELECT * FROM Teachers WHERE telegram_id = $1",
            str(user_id)
        )
        if student:
            await message.answer("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç!", reply_markup=keyboards.student_kb)
        elif teacher:
            await message.answer("üë®üè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=keyboards.teacher_kb)
        else:
            user_registration_data[user_id] = {"state": RegState.ROLE_SELECTION}
            await message.answer(
                "üëã –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=keyboards.registration_kb
            )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        if conn:
            await conn.close()

async def role_handler(message: Message):
    user_id = message.from_user.id
    if user_registration_data.get(user_id, {}).get("state") != RegState.ROLE_SELECTION:
        return
    role = "student" if message.text == 'üéì –°—Ç—É–¥–µ–Ω—Ç' else "teacher"
    next_state = RegState.TEACHER_CODE if role == "teacher" else RegState.NAME_INPUT
    user_registration_data[user_id] = {"state": next_state, "role": role, "data": {}}

    if role == "teacher":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=keyboards.cancel_kb)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=keyboards.cancel_kb)

async def process_registration(message: Message):
    user_id = message.from_user.id
    if user_id not in user_registration_data:
        return
    state = user_registration_data[user_id]["state"]
    text = message.text.strip()
    role = user_registration_data[user_id]["role"]

    try:
        # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        if state == RegState.TEACHER_CODE:
            if text != TEACHER_ACCESS_CODE:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            user_registration_data[user_id]["state"] = RegState.NAME_INPUT
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=keyboards.cancel_kb)
            return

        # 2) –í–≤–æ–¥ –∏–º–µ–Ω–∏
        if state == RegState.NAME_INPUT:
            if len(text) < 2:
                await message.answer("‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
                return
            user_registration_data[user_id]["data"]["name"] = text
            user_registration_data[user_id]["state"] = RegState.EMAIL_INPUT
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å email
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')],
                    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
                ],
                resize_keyboard=True
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:", reply_markup=kb)
            return

        # 3) –í–≤–æ–¥ email –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        if state == RegState.EMAIL_INPUT:
            if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                user_registration_data[user_id]["data"]["email"] = None
            else:
                if not validate_email(text):
                    await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
                    return
                user_registration_data[user_id]["data"]["email"] = text
            user_registration_data[user_id]["state"] = RegState.PHONE_INPUT
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
            kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')],
                    [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
                ],
                resize_keyboard=True
            )
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79991234567) –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:", reply_markup=kb)
            return

        # 4) –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        if state == RegState.PHONE_INPUT:
            if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
                user_registration_data[user_id]["data"]["phone"] = None
            else:
                if not validate_phone(text):
                    await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:")
                    return
                user_registration_data[user_id]["data"]["phone"] = text

            # —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
            if role == "student":
                user_registration_data[user_id]["state"] = RegState.GROUP_INPUT
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö–°-46):", reply_markup=keyboards.cancel_kb)
            else:
                user_registration_data[user_id]["state"] = RegState.DEPARTMENT_SELECTION
                await _ask_department(message)
            return

        # 5) –í–≤–æ–¥ –≥—Ä—É–ø–ø—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤)
        if state == RegState.GROUP_INPUT:
            if not validate_group(text):
                await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü—Ä–∏–º–µ—Ä: –ö–°-46")
                return
            user_registration_data[user_id]["data"]["group"] = text
            user_registration_data[user_id]["state"] = RegState.DEPARTMENT_SELECTION
            await _ask_department(message)
            return

        # 6) –í—ã–±–æ—Ä –∫–∞—Ñ–µ–¥—Ä—ã
        if state == RegState.DEPARTMENT_SELECTION:
            user_registration_data[user_id]["data"]["department"] = text
            await save_user_data(user_id, message)
            return

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        user_registration_data.pop(user_id, None)


async def _ask_department(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ñ–µ–¥—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    conn = await create_db_connection()
    try:
        rows = await conn.fetch("SELECT name FROM Departments ORDER BY name")
        names = [r['name'] for r in rows]
    finally:
        await conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫ –ø–æ 2 –≤ —Ä—è–¥
    buttons: list[list[KeyboardButton]] = []
    row: list[KeyboardButton] = []
    for name in names:
        row.append(KeyboardButton(text=name))
        if len(row) == 2:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ä—è–¥–æ–º
    buttons.append([KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')])

    kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–∞—Ñ–µ–¥—Ä—É:", reply_markup=kb)



async def save_user_data(user_id: int, message: Message):
    conn = None
    try:
        conn = await create_db_connection()
        data = user_registration_data[user_id]["data"]
        role = user_registration_data[user_id]["role"]

        # id –∫–∞—Ñ–µ–¥—Ä—ã
        dept_id = await conn.fetchval(
            "SELECT department_id FROM Departments WHERE name = $1",
            data["department"]
        )

        if role == "student":
            await conn.execute(
                """
                INSERT INTO Students(
                    name, email, phone, telegram_id, group_name, department_id
                ) VALUES($1, $2, $3, $4, $5, $6)
                """,
                data["name"], data["email"], data["phone"],
                str(user_id), data["group"], dept_id
            )
            await message.answer("üéì –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=keyboards.student_kb)
        else:
            await conn.execute(
                """
                INSERT INTO Teachers(
                    name, email, phone, telegram_id, department_id
                ) VALUES($1, $2, $3, $4, $5)
                """,
                data["name"], data["email"], data["phone"],
                str(user_id), dept_id
            )
            await message.answer("üë®üè´ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=keyboards.teacher_kb)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        user_registration_data.pop(user_id, None)
        if conn:
            await conn.close()
