# handlers/topics.py
import json
from aiogram import F
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import create_db_connection
import keyboards


# —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
class TopicStates(StatesGroup):
    WAITING_TITLE = State()
    WAITING_DESCRIPTION = State()
    WAITING_KEYWORDS = State()


class ApproveTopicStates(StatesGroup):
    WAITING_TITLE = State()


class DetachStates(StatesGroup):
    WAITING_TITLE = State()


class DeleteAccountStates(StatesGroup):
    CONFIRM = State()


async def log_action(conn, user_id: str, action: str, details: dict):
    await conn.execute(
        """
        INSERT INTO Logs(user_id, action, details)
        VALUES($1, $2, $3)
        """,
        user_id, action, json.dumps(details)
    )


def register_handlers(dp):
    # —Å–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–º—ã
    dp.message(F.text == 'üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É')(suggest_topic)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', TopicStates.WAITING_TITLE)(cancel_topic)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', TopicStates.WAITING_DESCRIPTION)(cancel_topic)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', TopicStates.WAITING_KEYWORDS)(cancel_topic)
    dp.message(TopicStates.WAITING_TITLE)(process_title)
    dp.message(TopicStates.WAITING_DESCRIPTION)(process_description)
    dp.message(TopicStates.WAITING_KEYWORDS)(process_keywords)

    # –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ç–µ–º—ã (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
    dp.message(F.text == '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–µ–º—É')(approve_topic_start)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', ApproveTopicStates.WAITING_TITLE)(cancel_approve_topic)
    dp.message(ApproveTopicStates.WAITING_TITLE)(process_approve_topic)

    # –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç —Ç–µ–º—ã (—Å—Ç—É–¥–µ–Ω—Ç)
    dp.message(F.text == 'üì§ –û—Ç–∫—Ä–µ–ø–∏—Ç—å—Å—è –æ—Ç —Ç–µ–º—ã')(detach_topic_start)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', DetachStates.WAITING_TITLE)(cancel_detach)
    dp.message(DetachStates.WAITING_TITLE)(process_detach)

    # —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    dp.message(F.text == 'üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')(delete_account_start)
    dp.message(F.text == '–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ', DeleteAccountStates.CONFIRM)(process_delete_account)
    dp.message(F.text == '–û–¢–ú–ï–ù–ê', DeleteAccountStates.CONFIRM)(cancel_delete_account)


# --- –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –¢–ï–ú–´ ---
async def suggest_topic(message: Message, state: FSMContext):
    user_tg = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        student = await conn.fetchrow(
            "SELECT student_id, department_id FROM Students WHERE telegram_id = $1",
            user_tg
        )
        teacher = await conn.fetchrow(
            "SELECT teacher_id, department_id FROM Teachers WHERE telegram_id = $1",
            user_tg
        )
        if not student and not teacher:
            return await message.answer(
                "‚ùå –î–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!",
                reply_markup=keyboards.registration_kb
            )
        dept_id = student['department_id'] if student else teacher['department_id']
        await state.update_data(
            student_id=student['student_id'] if student else None,
            teacher_id=teacher['teacher_id'] if teacher else None,
            department_id=dept_id
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:",
            reply_markup=keyboards.cancel_kb
        )
        await state.set_state(TopicStates.WAITING_TITLE)
    finally:
        await conn.close()


async def cancel_topic(message: Message, state: FSMContext):
    await state.clear()
    kb = keyboards.student_kb if await _is_student(message) else keyboards.teacher_kb
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kb)


async def process_title(message: Message, state: FSMContext):
    text = message.text.strip()
    if len(text) < 5:
        return await message.answer("‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(title=text)
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')],
            [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')],
        ],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", reply_markup=kb)
    await state.set_state(TopicStates.WAITING_DESCRIPTION)


async def process_description(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' and len(text) < 10:
        return await message.answer("‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    await state.update_data(description=None if text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else text)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=kb)
    await state.set_state(TopicStates.WAITING_KEYWORDS)


async def process_keywords(message: Message, state: FSMContext):
    kws = [k.strip() for k in message.text.split(',') if k.strip()]
    if not kws:
        return await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ.")
    data = await state.get_data()
    conn = await create_db_connection()
    try:
        await conn.execute(
            """
            INSERT INTO Topics(
                title, description, keywords, status,
                student_id, teacher_id, department_id
            ) VALUES($1,$2,$3,$4,$5,$6,$7)
            """,
            data['title'],
            data.get('description'),
            kws,
            'free',
            data.get('student_id'),
            data.get('teacher_id'),
            data['department_id']
        )
        await log_action(conn, str(message.from_user.id), 'add_topic', {
            'title': data['title'], 'keywords': kws
        })
        kb = keyboards.student_kb if data.get('student_id') else keyboards.teacher_kb
        await message.answer("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=kb)
    finally:
        await conn.close()
        await state.clear()


# --- –û–î–û–ë–†–ï–ù–ò–ï –¢–ï–ú–´ ---
async def approve_topic_start(message: Message, state: FSMContext):
    user_tg = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        if not await conn.fetchval(
            "SELECT 1 FROM Teachers WHERE telegram_id = $1", user_tg
        ):
            return await message.answer("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π!", reply_markup=keyboards.teacher_kb)

        rows = await conn.fetch(
            """
            SELECT t.title,
                   COALESCE(s.name,'‚Äî') AS proposer
              FROM Topics t
              LEFT JOIN Students s ON t.student_id = s.student_id
             WHERE t.status='free'
             ORDER BY t.title
             LIMIT 10
            """
        )
        if not rows:
            return await message.answer("–ù–µ—Ç —Ç–µ–º –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.", reply_markup=keyboards.teacher_kb)

        prompt = "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è:\n\n"
        prompt += "\n".join(f"‚Ä¢ {r['title']} (–ø—Ä–µ–¥–ª–æ–∂–∏–ª {r['proposer']})" for r in rows)
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]],
            resize_keyboard=True
        )
        await message.answer(prompt, reply_markup=kb)
        await state.set_state(ApproveTopicStates.WAITING_TITLE)
    finally:
        await conn.close()


async def process_approve_topic(message: Message, state: FSMContext):
    title = message.text.strip()
    user_tg = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        teacher_id = await conn.fetchval(
            "SELECT teacher_id FROM Teachers WHERE telegram_id = $1", user_tg
        )
        result = await conn.execute(
            """
            UPDATE Topics
               SET status='closed', teacher_id=$1
             WHERE title=$2 AND status='free'
            """,
            teacher_id, title
        )
        if result == 'UPDATE 0':
            return await message.answer("‚ö†Ô∏è –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        await message.answer(f"‚úÖ –¢–µ–º–∞ ¬´{title}¬ª –æ–¥–æ–±—Ä–µ–Ω–∞.", reply_markup=keyboards.teacher_kb)
    finally:
        await conn.close()
        await state.clear()


async def cancel_approve_topic(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboards.teacher_kb)


# --- –û–¢–ö–†–ï–ü–õ–ï–ù–ò–ï –û–¢ –¢–ï–ú–´ ---
async def detach_topic_start(message: Message, state: FSMContext):
    user_tg = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        student_id = await conn.fetchval(
            "SELECT student_id FROM Students WHERE telegram_id = $1", user_tg
        )
        if not student_id:
            return await message.answer("‚ùå –í—ã –Ω–µ —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboards.student_kb)

        rows = await conn.fetch(
            """
            SELECT title
            FROM Topics
            WHERE student_id = $1
            """,
            student_id
        )
        if not rows:
            return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–º –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è.", reply_markup=keyboards.student_kb)

        buttons = [[KeyboardButton(text=r['title'])] for r in rows]
        buttons.append([KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')])
        kb = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å—Å—è:", reply_markup=kb)
        await state.update_data(student_id=student_id)
        await state.set_state(DetachStates.WAITING_TITLE)
    finally:
        await conn.close()


async def process_detach(message: Message, state: FSMContext):
    data = await state.get_data()
    student_id = data.get('student_id')
    title = message.text.strip()
    if not student_id:
        await message.answer("‚ùå –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.", reply_markup=keyboards.student_kb)
        return await state.clear()

    conn = await create_db_connection()
    try:
        result = await conn.execute(
            """
            UPDATE Topics
               SET student_id = NULL, status = 'free'
             WHERE title = $1 AND student_id = $2
            """,
            title, student_id
        )
        if result == 'UPDATE 1':
            await message.answer(f"‚úÖ –í—ã –æ—Ç–∫—Ä–µ–ø–∏–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã ¬´{title}¬ª.", reply_markup=keyboards.student_kb)
            await log_action(conn, str(message.from_user.id), 'detach_topic', {'title': title})
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é —Ç–µ–º—É, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—É—é –∫ –≤–∞–º.", reply_markup=keyboards.student_kb)
    finally:
        await conn.close()
        await state.clear()


# --- –£–î–ê–õ–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê –ò –¢–ï–ú ---
async def delete_account_start(message: Message, state: FSMContext):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ')],
            [KeyboardButton(text='–û–¢–ú–ï–ù–ê')],
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂—ë–Ω–Ω—ã–µ –≤–∞–º–∏ —Ç–µ–º—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=kb
    )
    await state.set_state(DeleteAccountStates.CONFIRM)


async def process_delete_account(message: Message, state: FSMContext):
    user_tg = str(message.from_user.id)
    conn = await create_db_connection()
    try:
        student = await conn.fetchrow("SELECT student_id FROM Students WHERE telegram_id = $1", user_tg)
        if student:
            sid = student['student_id']
            await conn.execute("DELETE FROM Topics WHERE student_id=$1", sid)
            await conn.execute("DELETE FROM Students WHERE student_id=$1", sid)
            await log_action(conn, user_tg, 'delete_account', {'role':'student'})
            await message.answer("‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –≤–∞—à–∏ —Ç–µ–º—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=keyboards.registration_kb)
            await state.clear()
            return

        teacher = await conn.fetchrow("SELECT teacher_id FROM Teachers WHERE telegram_id = $1", user_tg)
        if teacher:
            tid = teacher['teacher_id']
            await conn.execute("DELETE FROM Topics WHERE teacher_id=$1", tid)
            await conn.execute("DELETE FROM Teachers WHERE teacher_id=$1", tid)
            await log_action(conn, user_tg, 'delete_account', {'role':'teacher'})
            await message.answer("‚úÖ –í–∞—à –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –≤–∞—à–∏ —Ç–µ–º—ã —É–¥–∞–ª–µ–Ω—ã.", reply_markup=keyboards.registration_kb)
            await state.clear()
            return

        await message.answer("‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboards.registration_kb)
    finally:
        await conn.close()


async def cancel_detach(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboards.student_kb)


async def cancel_delete_account(message: Message, state: FSMContext):
    await state.clear()
    kb = keyboards.student_kb if await _is_student(message) else keyboards.teacher_kb
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=kb)


# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def _is_student(message: Message) -> bool:
    conn = await create_db_connection()
    try:
        return bool(await conn.fetchval(
            "SELECT 1 FROM Students WHERE telegram_id=$1",
            str(message.from_user.id)
        ))
    finally:
        await conn.close()
