# handlers/categories.py
import json
from aiogram import F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import create_db_connection
import keyboards
from handlers.misc import cancel_handler

# –£—Ç–∏–ª–∏—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async def log_action(conn, user_id: str, action: str, details: dict):
    await conn.execute(
        """
        INSERT INTO Logs(user_id, action, details)
        VALUES($1, $2, $3)
        """,
        user_id,
        action,
        json.dumps(details)
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
class CatStates(StatesGroup):
    WAITING_CATEGORY    = State()
    WAITING_SUBCATEGORY = State()


def register_handlers(dp):
    dp.message(F.text == 'üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')(start_cat_search)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', CatStates.WAITING_CATEGORY)(cancel_handler)
    dp.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞', CatStates.WAITING_SUBCATEGORY)(cancel_handler)
    dp.message(CatStates.WAITING_CATEGORY)(process_category)
    dp.message(CatStates.WAITING_SUBCATEGORY)(process_subcategory)

async def start_cat_search(message: Message, state: FSMContext):
    conn = await create_db_connection()
    try:
        rows = await conn.fetch("SELECT category_id, name FROM Categories ORDER BY name")
    finally:
        await conn.close()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in rows:
        kb.add(KeyboardButton(text=f"{r['category_id']}|{r['name']}"))
    kb.add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await state.set_state(CatStates.WAITING_CATEGORY)

async def process_category(message: Message, state: FSMContext):
    cat_id, cat_name = message.text.split('|', 1)
    await state.update_data(category_id=int(cat_id), category_name=cat_name)
    conn = await create_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT subcategory_id, name FROM Subcategories WHERE category_id=$1 ORDER BY name",
            int(cat_id)
        )
    finally:
        await conn.close()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for r in rows:
        kb.add(KeyboardButton(text=f"{r['subcategory_id']}|{r['name']}"))
    kb.add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{cat_name}¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await state.set_state(CatStates.WAITING_SUBCATEGORY)

async def process_subcategory(message: Message, state: FSMContext):
    sub_id, sub_name = message.text.split('|', 1)
    data = await state.get_data()
    conn = await create_db_connection()
    try:
        topics = await conn.fetch(
            """
            SELECT title, COALESCE(description,'‚Äî') AS desc
            FROM Topics
            WHERE subcategory_id = $1
            ORDER BY title
            """, int(sub_id)
        )
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await log_action(
            conn,
            str(message.from_user.id),
            'search_by_category',
            {'category': data['category_name'], 'subcategory': sub_name, 'count': len(topics)}
        )
    finally:
        await conn.close()

    if not topics:
        await message.answer("–¢–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=keyboards.student_kb)
    else:
        lines = [f"üìÇ –¢–µ–º—ã –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{sub_name}¬ª:"]
        for t in topics:
            lines.append(f"‚Ä¢ {t['title']}")
        await message.answer("\n".join(lines), reply_markup=keyboards.student_kb)

    await state.clear()
