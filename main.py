import asyncio
import re
import io
import matplotlib.pyplot as plt
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from config import API_TOKEN
from database import create_db_connection, init_db


bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEACHER_ACCESS_CODE = "prof_code_123"
DEPARTMENT_NAME = "–¶–ò–¢–•–∏–ù"

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class TopicStates(StatesGroup):
    WAITING_TITLE = State()
    WAITING_DESCRIPTION = State()
    WAITING_KEYWORDS = State()

class ReserveStates(StatesGroup):
    WAITING_TITLE = State()

class UnreserveStates(StatesGroup):
    WAITING_CONFIRM = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
student_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É')],
        [KeyboardButton(text='üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã'), KeyboardButton(text='üìö –°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–º—ã')],
        [KeyboardButton(text='üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É')]
    ],
    resize_keyboard=True
)

teacher_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É')],
        [KeyboardButton(text='üîç –ü–æ–∏—Å–∫ —Ç–µ–º—ã'), KeyboardButton(text='üìö –°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–º—ã')],
        [KeyboardButton(text='‚úÖ –û–¥–æ–±—Ä–∏—Ç—å —Ç–µ–º—É')]
    ],
    resize_keyboard=True
)

admin_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º')],
        [KeyboardButton(text='üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã')],
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ],
    resize_keyboard=True
)


registration_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üéì –°—Ç—É–¥–µ–Ω—Ç')],
        [KeyboardButton(text='üë®üè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')]
    ],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]],
    resize_keyboard=True
)

@dp.message(F.text == 'üìö –°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–º—ã')
async def list_free_topics(message: Message, state: FSMContext):
    user_id = message.from_user.id
    conn = None
    try:
        conn = await create_db_connection()
        student_id = await conn.fetchval(
            "SELECT student_id FROM Students WHERE telegram_id = $1", str(user_id)
        )
        if not student_id:
            await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º!")
            return
        free_topics = await conn.fetch(
            "SELECT title FROM Topics WHERE status='free' AND department_id = ("
            "SELECT department_id FROM Students WHERE student_id=$1) LIMIT 10", student_id
        )
        if not free_topics:
            await message.answer("–°–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–µ–º –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=student_kb)
            return
        topics_list = '\n'.join(f"‚Ä¢ {t['title']}" for t in free_topics)
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è (–≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ):\n{topics_list}",
            reply_markup=cancel_kb
        )
        await state.set_state(ReserveStates.WAITING_TITLE)
    finally:
        if conn:
            await conn.close()

@dp.message(ReserveStates.WAITING_TITLE)
async def process_reserve_title(message: Message, state: FSMContext):
    title = message.text.strip()
    user_id = message.from_user.id
    conn = None
    try:
        conn = await create_db_connection()
        student_id = await conn.fetchval(
            "SELECT student_id FROM Students WHERE telegram_id=$1", str(user_id)
        )
        existing = await conn.fetchval(
            "SELECT COUNT(*) FROM Topics WHERE student_id=$1", student_id
        )
        if existing and existing > 0:
            await message.answer(
                "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–∞—è —Ç–µ–º—É. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–µ–ø–∏—Ç–µ—Å—å –æ—Ç –Ω–µ—ë.",
                reply_markup=student_kb
            )
            await state.clear()
            return
        updated = await conn.fetchrow(
            """
            UPDATE Topics
            SET status='reserved', student_id=$1
            WHERE title=$2 AND status='free'
            RETURNING topic_id
            """,
            student_id, title
        )
        if not updated:
            await message.answer(
                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.",
                reply_markup=student_kb
            )
        else:
            topic_id = updated['topic_id']
            await conn.execute(
                "INSERT INTO Interactions(student_id, topic_id, user_role, action) VALUES($1,$2,'student','reserved')",
                student_id, topic_id
            )
            await message.answer(
                f"‚úÖ –¢–µ–º–∞ ¬´{title}¬ª —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –≤–∞–º–∏!", reply_markup=student_kb
            )
    finally:
        if conn:
            await conn.close()
        await state.clear()

@dp.message(F.text == 'üîÑ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É')
async def start_unreserve(message: Message, state: FSMContext):
    user_id = message.from_user.id
    conn = None
    try:
        conn = await create_db_connection()
        student_id = await conn.fetchval(
            "SELECT student_id FROM Students WHERE telegram_id=$1", str(user_id)
        )
        if not student_id:
            await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º!")
            return
        current = await conn.fetchrow(
            "SELECT title FROM Topics WHERE student_id=$1", student_id
        )
        if not current:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π —Ç–µ–º—ã.", reply_markup=student_kb)
            return
        title = current['title']
        yes_no_kb = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text='–î–∞'), KeyboardButton(text='–ù–µ—Ç')],
                [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
            ],
            resize_keyboard=True
        )
        await message.answer(
            f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Ç–µ–º–∞: ¬´{title}¬ª. –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å—Å—è?",
            reply_markup=yes_no_kb
        )
        await state.update_data(title=title, student_id=student_id)
        await state.set_state(UnreserveStates.WAITING_CONFIRM)
    finally:
        if conn:
            await conn.close()

@dp.message(UnreserveStates.WAITING_CONFIRM)
async def process_unreserve_confirm(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    data = await state.get_data()
    title = data.get('title')
    student_id = data.get('student_id')
    conn = None
    try:
        if text == '–¥–∞':
            conn = await create_db_connection()
            await conn.execute(
                "UPDATE Topics SET status='free', student_id=NULL WHERE student_id=$1", student_id
            )
            await conn.execute(
                "INSERT INTO Interactions(student_id, topic_id, user_role, action) "
                "SELECT $1, topic_id, 'student', 'unreserved' FROM Topics WHERE title=$2",
                student_id, title
            )
            await message.answer(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä–µ–ø–∏–ª–∏—Å—å –æ—Ç —Ç–µ–º—ã ¬´{title}¬ª.", reply_markup=student_kb
            )
        else:
            await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=student_kb)
    finally:
        if conn:
            await conn.close()
        await state.clear()

async def send_group_histogram(message: Message):
    conn = await create_db_connection()
    try:
        rows = await conn.fetch(
            "SELECT COALESCE(group_name, '–ù–µ —É–∫–∞–∑–∞–Ω–∞') AS grp, COUNT(*) AS cnt "
            "FROM Students GROUP BY grp ORDER BY cnt DESC"
        )
        groups = [r['grp'] for r in rows]
        counts = [r['cnt'] for r in rows]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
        plt.figure(figsize=(8,4))
        plt.bar(groups, counts)
        plt.xlabel('–ì—Ä—É–ø–ø–∞')
        plt.ylabel('–ß–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤')
        plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º')
        plt.tight_layout()

        buf = io.BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        await bot.send_photo(message.chat.id, buf)
        plt.close()
    finally:
        await conn.close()

@dp.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º')
async def cmd_group_stats(message: Message):
    await send_group_histogram(message)

@dp.message(Command("start"))
async def start_handler(message: Message):
    user_id = message.from_user.id
    conn = None
    try:
        conn = await create_db_connection()
        student = await conn.fetchrow("SELECT 1 FROM Students WHERE telegram_id=$1", str(user_id))
        teacher = await conn.fetchrow("SELECT 1 FROM Teachers WHERE telegram_id=$1", str(user_id))
        if student:
            await message.answer("üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç!", reply_markup=student_kb)
        elif teacher:
            await message.answer("üë®üè´ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å!", reply_markup=teacher_kb)
        else:
            # ... —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            pass
    finally:
        if conn:
            await conn.close()

if __name__ == '__main__':
    asyncio.run(dp.start_polling(bot))